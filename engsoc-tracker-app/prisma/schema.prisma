generator client {
    provider = "prisma-client-js"
}

generator zod {
    provider = "zod-prisma-types"
}

datasource db {
    provider     = "mongodb"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

//AUTH
// model ResetTokens {
//     id             String   @id @default(auto()) @map("_id") @db.ObjectId
//     userId         String   @db.ObjectId
//     token          String
//     tokenExpiresAt DateTime
// }

// model VerifyEmailTokens {
//     id             String   @id @default(auto()) @map("_id") @db.ObjectId
//     userId         String   @unique @db.ObjectId
//     token          String
//     tokenExpiresAt DateTime
// }

// model Session {
//     id        String   @id @map("_id")
//     user      User?    @relation(fields: [userId], references: [id])
//     userId    String   @db.ObjectId //ADD @UNIQUE TO THIS to limit to one session per user
//     expiresAt DateTime
// }

// model User {
//     id            String    @id @default(auto()) @map("_id") @db.ObjectId
//     //   role                 Role      @default(CLIENT)
//     email         String    @unique
//     emailVerified Boolean?
//     name          String
//     HasAccount    Account?
//     // hasSession    Session? //TO DO: LIMIT TO ONE SESSION AS SHOWN HERE
//     hasSessions   Session[]
//     role          Role      @default(MEMBER)
// }

// model Account {
//     id       String  @id @default(auto()) @map("_id") @db.ObjectId
//     user     User?   @relation(fields: [userId], references: [id])
//     userId   String? @unique @db.ObjectId
//     password String?
//     salt     String?
//     // githubId    String?     @unique
//     // googleId    String?     @unique
// }

enum Role {
    MEMBER
    ADMIN
    SUPER
}

//BUSINESS LOGIC
enum ApplicationType {
    INTERNSHIP
    PLACEMENT
    GRADUATE
}

enum EngineeringType {
    AEROSPACE
    CHEMICAL
    CIVIL
    COMPUTING
    ELECTRONIC
    MECHANICAL
}

model Application {
    id                     String          @id @default(auto()) @map("_id") @db.ObjectId
    programme              String
    company                String
    type                   ApplicationType
    engineering            String
    openDate               DateTime?
    closeDate              DateTime?
    requiresCv             Boolean?
    requiresCoverLetter    Boolean?
    requiresWrittenAnswers Boolean?
    notes                  String?
    link                   String          @unique
    isSponsored            Boolean         @default(false)
}

model AppConfig {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    lastUpdated DateTime
    isUpdating  Boolean
}
